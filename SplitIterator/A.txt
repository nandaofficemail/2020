// case 1
class Split {
	public static void main(String[] args) {
		Integer[] integers = { 0, 1, 2, 3, 4, 52 };
		int h=StreamSupport.stream(new Split.CustomSplitIterator<Integer>(integers, 0, integers.length - 1), true).reduce(0,
				Integer::max, Integer::max);
		System.out.println(h); 
	}

	static class CustomSplitIterator<T> implements Spliterator<T> {

		T[] t;
		int start;
		int end;

		public CustomSplitIterator(T[] t, int s, int e) {
			this.t = t;
			this.start = s;
			this.end = e;
		}

		@Override
		public Spliterator<T> trySplit() {
			if (end - start < 2)
				return null;
			int mid = (start + end) / 2;
			int oldStart = start;
			start = mid + 1;
			return new CustomSplitIterator<T>(t, oldStart, mid);
		}

		@Override
		public boolean tryAdvance(Consumer<? super T> action) {
			if (start <= end) {
				action.accept(t[start]);
				start++;
				return true;
			}
			return false;
		}

		@Override
		public int characteristics() {
			return SIZED | IMMUTABLE;
		}

		@Override
		public long estimateSize() {
			return end - start;
		}

	}
}